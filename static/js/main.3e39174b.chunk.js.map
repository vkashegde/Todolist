{"version":3,"sources":["NewTodoForm.js","Todo.js","TodoList.js","App.js","serviceWorker.js","index.js"],"names":["NewTodoForm","props","state","task","handleChange","bind","handleSubmit","event","this","setState","target","name","value","preventDefault","createTodo","id","uuidv4","completed","className","onSubmit","htmlFor","type","placeholder","onChange","Component","Todo","isEditing","handleRemove","toggleForm","handleUpdate","handleToggle","removeTodo","updateTodo","toggleTodo","onClick","TodoList","todos","create","remove","update","toggleCompletion","newTodo","filter","t","updatedTask","updatedTodos","map","todo","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3e39174b.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport './NewTodoForm.css'\r\nclass NewTodoForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state={\r\n            task:\"\"\r\n        }\r\n        this.handleChange=this.handleChange.bind(this)\r\n        this.handleSubmit=this.handleSubmit.bind(this)\r\n    }\r\n\r\n    handleChange(event){\r\n        this.setState({\r\n            [event.target.name]:event.target.value\r\n        })\r\n    }\r\n    handleSubmit(event){\r\n        event.preventDefault()\r\n        this.props.createTodo({...this.state,id:uuidv4(),completed:false})\r\n        this.setState({task:\"\"})\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <form className=\"NewTodoForm\" onSubmit={this.handleSubmit}>\r\n                <label htmlFor=\"task\"></label>\r\n                <input type=\"text\" name=\"task\" placeholder=\"New Todo\" id=\"task\" value={this.state.task}\r\n                onChange={this.handleChange}/>\r\n\r\n                <button>Add Todo</button>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NewTodoForm\r\n","import React, { Component } from 'react'\r\nimport './Todo.css'\r\n\r\nclass Todo extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state={\r\n            isEditing:false,\r\n            task:this.props.task\r\n        }\r\n        this.handleRemove=this.handleRemove.bind(this)\r\n        this.toggleForm = this.toggleForm.bind(this)\r\n        this.handleChange = this.handleChange.bind(this)\r\n        this.handleUpdate = this.handleUpdate.bind(this)\r\n        this.handleToggle  = this.handleToggle.bind(this)\r\n    }\r\n    \r\n    handleRemove(){\r\n        this.props.removeTodo(this.props.id)\r\n    }\r\n\r\n    toggleForm(){\r\n        this.setState({isEditing:!this.state.isEditing})\r\n    }\r\n\r\n    handleUpdate(event){\r\n        event.preventDefault()\r\n        this.props.updateTodo(this.props.id,this.state.task)\r\n        this.setState({isEditing:false})\r\n    }\r\n\r\n    handleChange(event){\r\n        this.setState({\r\n            [event.target.name]:event.target.value\r\n        })\r\n    }\r\n\r\n    handleToggle(){\r\n        this.props.toggleTodo(this.props.id)\r\n    }\r\n\r\n    render() {\r\n        let result;\r\n        if(this.state.isEditing){\r\n            result=(\r\n             <div className=\"Todo\">\r\n                 <form className=\"Todo-edit-form\" onSubmit={this.handleUpdate} >\r\n                     <input type=\"text\"\r\n                     value={this.state.task}\r\n                     name=\"task\"\r\n                     onChange={this.handleChange}/>\r\n                     <button>Save</button>\r\n                 </form>\r\n             </div>\r\n            )\r\n        }else{\r\n            result=(\r\n                <div className=\"Todo\">\r\n                    <li className={this.props.completed ? 'Todo-task completed':'Todo-task'}\r\n                     onClick={this.handleToggle}\r\n                     >\r\n                         {this.props.task}\r\n                     </li>\r\n\r\n                     <div className=\"Todo-buttons\">\r\n                     <button onClick={this.toggleForm}>\r\n                         <i className=\"fas fa-pen\"/>\r\n                     </button>\r\n                    <button onClick={this.handleRemove}>\r\n                        <i className=\"fas fa-trash\"/>\r\n                    </button>\r\n                     </div>\r\n                </div>\r\n            )\r\n        }\r\n        return result\r\n    }\r\n}\r\n\r\nexport default Todo\r\n","import React, { Component } from 'react'\r\nimport NewTodoForm from './NewTodoForm'\r\nimport Todo from './Todo'\r\nimport './TodoList.css'\r\n\r\nclass TodoList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state={\r\n            todos:[\r\n                   \r\n                  ]\r\n        }\r\n        this.create=this.create.bind(this)\r\n        this.remove = this.remove.bind(this)\r\n        this.update = this.update.bind(this)\r\n        this.toggleCompletion =this.toggleCompletion.bind(this)\r\n    }\r\n\r\n    create(newTodo){\r\n        this.setState({\r\n            todos:[...this.state.todos,newTodo]\r\n        })\r\n    }\r\n    \r\n    remove(id){\r\n        this.setState({\r\n            todos:this.state.todos.filter(t=> t.id!==id)\r\n        })\r\n    }\r\n\r\n    update(id,updatedTask){\r\n        const updatedTodos = this.state.todos.map(todo=>{\r\n            if(todo.id === id){\r\n                return{...todo,task:updatedTask}\r\n            }\r\n            return todo;\r\n        })\r\n        this.setState({todos:updatedTodos})\r\n        \r\n    }\r\n\r\n    toggleCompletion(id){\r\n        const updatedTodos = this.state.todos.map(todo=>{\r\n            if(todo.id === id){\r\n                return{...todo,completed:!todo.completed}\r\n            }\r\n            return todo;\r\n        })\r\n        this.setState({todos:updatedTodos})\r\n    }\r\n\r\n    render() {\r\n        const todos = this.state.todos.map((todo)=>{\r\n            return (\r\n                <Todo key={todo.id}\r\n                 id={todo.id} \r\n                 task={todo.task} \r\n                 completed={todo.completed}\r\n                 removeTodo={this.remove}\r\n                 updateTodo = {this.update}\r\n                 toggleTodo={this.toggleCompletion}\r\n                 />\r\n            )\r\n        })\r\n        return (\r\n            <div className=\"TodoList\">\r\n                <h1 className=\"center\">Todo List! <span>A Simple React Todo List App</span></h1>\r\n                \r\n                <ul>\r\n                    {todos}\r\n                </ul>\r\n                <NewTodoForm createTodo={this.create}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoList\r\n","import React from 'react';\nimport TodoList from './TodoList'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TodoList/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}